{"ast":null,"code":"var _jsxFileName = \"/home/amrtz/React/reactForm/src/components/SimpleInput.js\",\n  _s = $RefreshSig$();\nimport { useRef, useState } from \"react\";\n//if we are only interested in checking once, ref might be better... beacause logging and upadating value on every keystroke isnt needed here\n//and if we want to validate it on every keystroke it would be nice using state, if we want to reset after submission state would come in use\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SimpleInput = props => {\n  _s();\n  const inputChangeRef = useRef();\n  const [enteredName, setEnteredName] = useState(\"\");\n  const [enteredNameIsValid, setEnteredNameIsValid] = useState(false);\n  const [enteredNameIsTouched, setEnteredNameIsTouched] = useState(false);\n  const nameInputChangeHandler = event => {\n    setEnteredName(event.target.value);\n  };\n  const inputBlurHandler = event => {\n    setEnteredNameIsTouched(true);\n    latestState = event.target.value;\n    if (latestState.trim() !== \"\") {\n      setEnteredNameIsValid(true);\n    }\n  };\n  const formSubmitHandler = event => {\n    event.preventDefault();\n    setEnteredNameIsTouched(true);\n    latestState = event.target.value;\n    if (latestState.trim() !== \"\") {\n      setEnteredNameIsValid(true);\n      return;\n    }\n    console.log(enteredName);\n    const enteredValue = inputChangeRef.current.value;\n    console.log(enteredValue);\n    setEnteredNameIsValid(true);\n    setEnteredName(\"\");\n  };\n  const inputIsInvalid = !enteredNameIsValid && enteredNameIsTouched;\n  const inputClasses = inputIsInvalid ? \"form-control invalid\" : \"form-control\";\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: formSubmitHandler,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: inputClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: \"Your Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        ref: inputChangeRef,\n        type: \"text\",\n        id: \"name\",\n        onBlur: inputBlurHandler,\n        onChange: nameInputChangeHandler,\n        value: enteredName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this), inputIsInvalid && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-text\",\n        children: \"Name must not be empty\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 28\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-actions\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n};\n_s(SimpleInput, \"nUTzscmR1jyvR6D70wh/bKJ9Kj0=\");\n_c = SimpleInput;\nexport default SimpleInput;\nvar _c;\n$RefreshReg$(_c, \"SimpleInput\");","map":{"version":3,"names":["useRef","useState","jsxDEV","_jsxDEV","SimpleInput","props","_s","inputChangeRef","enteredName","setEnteredName","enteredNameIsValid","setEnteredNameIsValid","enteredNameIsTouched","setEnteredNameIsTouched","nameInputChangeHandler","event","target","value","inputBlurHandler","latestState","trim","formSubmitHandler","preventDefault","console","log","enteredValue","current","inputIsInvalid","inputClasses","onSubmit","children","className","htmlFor","fileName","_jsxFileName","lineNumber","columnNumber","ref","type","id","onBlur","onChange","_c","$RefreshReg$"],"sources":["/home/amrtz/React/reactForm/src/components/SimpleInput.js"],"sourcesContent":["import { useRef, useState } from \"react\";\n//if we are only interested in checking once, ref might be better... beacause logging and upadating value on every keystroke isnt needed here\n//and if we want to validate it on every keystroke it would be nice using state, if we want to reset after submission state would come in use\n\nconst SimpleInput = (props) => {\n  const inputChangeRef = useRef();\n  const [enteredName, setEnteredName] = useState(\"\");\n  const [enteredNameIsValid, setEnteredNameIsValid] = useState(false);\n  const [enteredNameIsTouched, setEnteredNameIsTouched] = useState(false);\n  const nameInputChangeHandler = (event) => {\n    setEnteredName(event.target.value);\n  };\n\n  const inputBlurHandler = (event) => {\n    setEnteredNameIsTouched(true);\n    latestState = event.target.value;\n    if (latestState.trim() !== \"\") {\n      setEnteredNameIsValid(true);\n    }\n  };\n\n  const formSubmitHandler = (event) => {\n    event.preventDefault();\n\n    setEnteredNameIsTouched(true);\n    latestState = event.target.value;\n    if (latestState.trim() !== \"\") {\n      setEnteredNameIsValid(true);\n      return;\n    }\n    console.log(enteredName);\n    const enteredValue = inputChangeRef.current.value;\n    console.log(enteredValue);\n    setEnteredNameIsValid(true);\n    setEnteredName(\"\");\n  };\n  const inputIsInvalid = !enteredNameIsValid && enteredNameIsTouched;\n\n  const inputClasses = inputIsInvalid ? \"form-control invalid\" : \"form-control\";\n  return (\n    <form onSubmit={formSubmitHandler}>\n      <div className={inputClasses}>\n        <label htmlFor=\"name\">Your Name</label>\n        <input\n          ref={inputChangeRef}\n          type=\"text\"\n          id=\"name\"\n          onBlur={inputBlurHandler}\n          onChange={nameInputChangeHandler}\n          value={enteredName}\n        />\n        {inputIsInvalid && <p className=\"error-text\">Name must not be empty</p>}\n      </div>\n      <div className=\"form-actions\">\n        <button>Submit</button>\n      </div>\n    </form>\n  );\n};\n\nexport default SimpleInput;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}